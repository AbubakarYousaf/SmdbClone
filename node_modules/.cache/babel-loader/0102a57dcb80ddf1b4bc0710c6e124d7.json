{"ast":null,"code":"import { useEffect, useCallback } from 'react';\nimport { ADVANCE_PAGE } from '../store/list/listTypes';\nexport default function useInfiniteScroll(scrollRef, dispatch) {\n  const scrollObserver = useCallback(node => {\n    new IntersectionObserver(entries => {\n      entries.forEach(en => {\n        if (en.intersectionRatio > 0) {\n          dispatch({\n            type: ADVANCE_PAGE\n          });\n          console.log('NEW PAGE');\n        }\n      });\n    }).observe(node);\n  }, [dispatch]);\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollObserver(scrollRef.current);\n    }\n  }, [scrollObserver, scrollRef]);\n}","map":{"version":3,"sources":["/Users/imacbruker/Desktop/smdb/src/hooks/useInfiniteScroll.ts"],"names":["useEffect","useCallback","ADVANCE_PAGE","useInfiniteScroll","scrollRef","dispatch","scrollObserver","node","IntersectionObserver","entries","forEach","en","intersectionRatio","type","console","log","observe","current"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,YAAT,QAAgD,yBAAhD;AAEA,eAAe,SAASC,iBAAT,CACbC,SADa,EAEbC,QAFa,EAGP;AACN,QAAMC,cAAc,GAAGL,WAAW,CAC/BM,IAAD,IAA0B;AACxB,QAAIC,oBAAJ,CAA0BC,OAAD,IAAmB;AAC1CA,MAAAA,OAAO,CAACC,OAAR,CAAiBC,EAAD,IAAQ;AACtB,YAAIA,EAAE,CAACC,iBAAH,GAAuB,CAA3B,EAA8B;AAC5BP,UAAAA,QAAQ,CAAC;AAAEQ,YAAAA,IAAI,EAAEX;AAAR,WAAD,CAAR;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;AACF,OALD;AAMD,KAPD,EAOGC,OAPH,CAOWT,IAPX;AAQD,GAV+B,EAWhC,CAACF,QAAD,CAXgC,CAAlC;AAcAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,SAAS,CAACa,OAAd,EAAuB;AACrBX,MAAAA,cAAc,CAACF,SAAS,CAACa,OAAX,CAAd;AACD;AACF,GAJQ,EAIN,CAACX,cAAD,EAAiBF,SAAjB,CAJM,CAAT;AAKD","sourcesContent":["import { useEffect, useCallback } from 'react';\nimport { ADVANCE_PAGE, AdvancePageAction } from '../store/list/listTypes';\n\nexport default function useInfiniteScroll(\n  scrollRef: React.RefObject<HTMLDivElement>,\n  dispatch: React.Dispatch<AdvancePageAction>\n): void {\n  const scrollObserver = useCallback(\n    (node: HTMLDivElement) => {\n      new IntersectionObserver((entries): void => {\n        entries.forEach((en) => {\n          if (en.intersectionRatio > 0) {\n            dispatch({ type: ADVANCE_PAGE });\n            console.log('NEW PAGE');\n          }\n        });\n      }).observe(node);\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollObserver(scrollRef.current);\n    }\n  }, [scrollObserver, scrollRef]);\n}\n"]},"metadata":{},"sourceType":"module"}