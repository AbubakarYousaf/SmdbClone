{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAgWVDXT2uLLVzQJcgU1WddxjCiNGXDw64\",\n  authDomain: \"discord-by-abubakar.firebaseapp.com\",\n  projectId: \"discord-by-abubakar\",\n  storageBucket: \"discord-by-abubakar.appspot.com\",\n  messagingSenderId: \"414256971417\",\n  appId: \"1:414256971417:web:b49fbc353a27cca9ba4208\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore().doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addTitle = (userId, id, mediaType, posterPath, title) => {\n  if (!userId) return;\n  firestore().collection(\"users\").doc(userId).collection(\"titles\").doc(`${mediaType}_${id}`).set({\n    id,\n    mediaType,\n    posterPath,\n    title\n  });\n};\nexport const displayTitles = async userId => {\n  if (!userId) return null;\n  let titles = [];\n  const titleRef = await firestore().collection(\"users\").doc(userId).collection(\"titles\").get();\n\n  try {\n    titleRef.forEach(doc => {\n      titles.push(doc.data());\n    });\n  } catch (error) {\n    console.log(error);\n  }\n\n  return titles;\n};\nexport const deleteTitle = (userId, id) => {\n  firestore().collection(\"users\").doc(userId).collection(\"titles\").doc(id).delete();\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore;\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/imacbruker/Desktop/smdb/src/firebase/firebaseUtils.ts"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addTitle","userId","id","mediaType","posterPath","title","collection","displayTitles","titles","titleRef","forEach","push","data","deleteTitle","delete","initializeApp","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAgWVDXT2uLLVzQJcgU1WddxjCiNGXDw64\",\n    authDomain: \"discord-by-abubakar.firebaseapp.com\",\n    projectId: \"discord-by-abubakar\",\n    storageBucket: \"discord-by-abubakar.appspot.com\",\n    messagingSenderId: \"414256971417\",\n    appId: \"1:414256971417:web:b49fbc353a27cca9ba4208\"\n  \n};\n\nexport const createUserProfileDocument = async (\n    userAuth: firebase.User | null,\n    additionalData?: object\n) => {\n    if (!userAuth) return;\n\n    const userRef = firestore().doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData,\n            });\n        } catch (error) {\n            console.log(\"error creating user\", error.message);\n        }\n    }\n    return userRef;\n};\n\nexport const addTitle = (\n    userId: string | null,\n    id: string,\n    mediaType: string,\n    posterPath: string | null,\n    title: string\n) => {\n    if (!userId) return;\n\n    firestore()\n        .collection(\"users\")\n        .doc(userId)\n        .collection(\"titles\")\n        .doc(`${mediaType}_${id}`)\n        .set({ id, mediaType, posterPath, title });\n};\n\nexport const displayTitles = async (userId: string | null) => {\n    if (!userId) return null;\n\n    let titles: any[] = [];\n    const titleRef = await firestore()\n        .collection(\"users\")\n        .doc(userId)\n        .collection(\"titles\")\n        .get();\n\n    try {\n        titleRef.forEach((doc) => {\n            titles.push(doc.data());\n        });\n    } catch (error) {\n        console.log(error);\n    }\n\n    return titles;\n};\n\nexport const deleteTitle = (userId: string, id: string) => {\n    firestore()\n        .collection(\"users\")\n        .doc(userId)\n        .collection(\"titles\")\n        .doc(id)\n        .delete();\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore;\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}