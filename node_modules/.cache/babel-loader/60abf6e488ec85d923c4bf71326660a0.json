{"ast":null,"code":"var _jsxFileName = \"/Users/imacbruker/Desktop/smdb/src/components/Randomizer.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport useWindowDimensions from '../hooks/useWindowDimensions';\nimport PosterPng from '../assets/poster.png';\nimport { API_URL, API_KEY, IMAGE_BASE_URL, POSTER_SIZE, BACKDROP_SIZE } from '../config';\nimport { Container, Background, Column, Link, Img, Buttons, Button } from './RandomizerStyles';\n\nconst Randomizer = () => {\n  const [loaded, setLoaded] = useState(false);\n  const [bkgLoaded, setBkgLoaded] = useState(false);\n  const [mediaType, setMediaType] = useState('');\n  const [genres, setGenres] = useState({\n    tv: [],\n    movie: []\n  });\n  const [state, setState] = useState({\n    id: 0,\n    name: '',\n    title: '',\n    poster_path: '',\n    backdrop_path: ''\n  });\n  useEffect(() => {\n    fetch(`${API_URL}genre/tv/list?api_key=${API_KEY}&language=en-US`).then(res => res.json()).then(tv => {\n      fetch(`${API_URL}genre/movie/list?api_key=${API_KEY}&language=en-US`).then(res => res.json()).then(movie => {\n        setGenres({\n          tv: [...tv.genres],\n          movie: [...movie.genres]\n        });\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (mediaType) {\n      const page = Math.floor(Math.random() * 5) + 1;\n      const random = Math.floor(Math.random() * genres[mediaType].length);\n      const genre = genres[mediaType][random].id;\n      fetch(`${API_URL}discover/${mediaType}?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&page=${page}&with_genres=${genre}`).then(res => res.json()).then(_ref => {\n        let {\n          results\n        } = _ref;\n        let title = results[Math.floor(Math.random() * results.length)];\n\n        if (!title.poster_path || !title.backdrop_path) {\n          while (!title.poster_path || !title.backdrop_path) {\n            title = results[Math.floor(Math.random() * results.length)];\n          }\n        }\n\n        setState(title);\n      });\n      setMediaType('');\n    }\n  }, [mediaType, genres]);\n\n  const getTitle = type => {\n    setMediaType(type);\n    setLoaded(false);\n    setBkgLoaded(false);\n  };\n\n  const {\n    backdrop_path,\n    poster_path,\n    name,\n    title,\n    id\n  } = state;\n  const {\n    width\n  } = useWindowDimensions();\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, backdrop_path && width >= 1199.98 && /*#__PURE__*/React.createElement(Background, {\n    alt: name ? name : title,\n    src: `${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop_path}`,\n    fade: bkgLoaded,\n    onLoad: () => setBkgLoaded(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: poster_path ? `${name ? 'tv' : 'movie'}/${id}` : `#`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Img, {\n    alt: name ? name : title,\n    src: poster_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${poster_path}` : PosterPng,\n    fade: loaded,\n    onLoad: () => setLoaded(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Buttons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => getTitle('tv'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"TV SHOW\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => getTitle('movie'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"MOVIE\"))));\n};\n\nexport default Randomizer;","map":{"version":3,"sources":["/Users/imacbruker/Desktop/smdb/src/components/Randomizer.tsx"],"names":["React","useState","useEffect","useWindowDimensions","PosterPng","API_URL","API_KEY","IMAGE_BASE_URL","POSTER_SIZE","BACKDROP_SIZE","Container","Background","Column","Link","Img","Buttons","Button","Randomizer","loaded","setLoaded","bkgLoaded","setBkgLoaded","mediaType","setMediaType","genres","setGenres","tv","movie","state","setState","id","name","title","poster_path","backdrop_path","fetch","then","res","json","page","Math","floor","random","length","genre","results","getTitle","type","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useWindowDimensions from '../hooks/useWindowDimensions';\nimport PosterPng from '../assets/poster.png';\nimport {\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  POSTER_SIZE,\n  BACKDROP_SIZE,\n} from '../config';\nimport {\n  Container,\n  Background,\n  Column,\n  Link,\n  Img,\n  Buttons,\n  Button,\n} from './RandomizerStyles';\n\ninterface Genres {\n  [x: string]: { id: number; name: string }[];\n}\n\nconst Randomizer: React.FC = () => {\n  const [loaded, setLoaded] = useState(false);\n  const [bkgLoaded, setBkgLoaded] = useState(false);\n  const [mediaType, setMediaType] = useState('');\n  const [genres, setGenres] = useState<Genres>({ tv: [], movie: [] });\n  const [state, setState] = useState({\n    id: 0,\n    name: '',\n    title: '',\n    poster_path: '',\n    backdrop_path: '',\n  });\n\n  useEffect(() => {\n    fetch(`${API_URL}genre/tv/list?api_key=${API_KEY}&language=en-US`)\n      .then((res: Response) => res.json())\n      .then((tv) => {\n        fetch(`${API_URL}genre/movie/list?api_key=${API_KEY}&language=en-US`)\n          .then((res: Response) => res.json())\n          .then((movie) => {\n            setGenres({ tv: [...tv.genres], movie: [...movie.genres] });\n          });\n      });\n  }, []);\n\n  useEffect(() => {\n    if (mediaType) {\n      const page = Math.floor(Math.random() * 5) + 1;\n      const random = Math.floor(Math.random() * genres[mediaType].length);\n      const genre = genres[mediaType][random].id;\n      fetch(\n        `${API_URL}discover/${mediaType}?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&page=${page}&with_genres=${genre}`\n      )\n        .then((res: Response) => res.json())\n        .then(({ results }) => {\n          let title = results[Math.floor(Math.random() * results.length)];\n          if (!title.poster_path || !title.backdrop_path) {\n            while (!title.poster_path || !title.backdrop_path) {\n              title = results[Math.floor(Math.random() * results.length)];\n            }\n          }\n          setState(title);\n        });\n      setMediaType('');\n    }\n  }, [mediaType, genres]);\n\n  const getTitle = (type: string) => {\n    setMediaType(type);\n    setLoaded(false);\n    setBkgLoaded(false);\n  };\n\n  const { backdrop_path, poster_path, name, title, id } = state;\n  const { width } = useWindowDimensions();\n\n  return (\n    <Container>\n      {backdrop_path && width >= 1199.98 && (\n        <Background\n          alt={name ? name : title}\n          src={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop_path}`}\n          fade={bkgLoaded}\n          onLoad={() => setBkgLoaded(true)}\n        />\n      )}\n      <Column>\n        <Link to={poster_path ? `${name ? 'tv' : 'movie'}/${id}` : `#`}>\n          <Img\n            alt={name ? name : title}\n            src={\n              poster_path\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${poster_path}`\n                : PosterPng\n            }\n            fade={loaded}\n            onLoad={() => setLoaded(true)}\n          />\n        </Link>\n        <Buttons>\n          <Button onClick={() => getTitle('tv')}>TV SHOW</Button>\n          <Button onClick={() => getTitle('movie')}>MOVIE</Button>\n        </Buttons>\n      </Column>\n    </Container>\n  );\n};\n\nexport default Randomizer;\n"]},"metadata":{},"sourceType":"module"}