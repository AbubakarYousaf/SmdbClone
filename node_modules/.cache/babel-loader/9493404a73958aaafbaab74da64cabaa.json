{"ast":null,"code":"var _jsxFileName = \"/Users/imacbruker/Desktop/smdb/src/components/Title.tsx\";\nimport React, { useState, useReducer, useEffect } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport useWindowDimensions from \"../hooks/useWindowDimensions\";\nimport titleReducer from \"../store/title/titleReducer\";\nimport { useFetchTitle } from \"../store/title/titleActions\";\nimport { sliceOverview } from \"../helpers\";\nimport ImdbImg from \"../assets/imdb.png\";\nimport StarImg from \"../assets/star.png\";\nimport Spinner from \"./layout/Spinner\";\nimport TitleBackdrop from \"./title/TitleBackdrop\";\nimport TitlePoster from \"./title/TitlePoster\";\nimport TitleCast from \"./title/TitleCast\";\nimport TitleButtons from \"./title/TitleButtons\";\nimport { Container, OuterDiv, InnerDiv, Heading, Overview, Info, Rating, Imdb, Star, Rank, Row, OuterSimRow, SimRow, ReleaseDate, NotFound } from \"./TitleStyles\";\nimport { Link } from \"./list/ListPosterStyles\";\nimport { IMAGE_BASE_URL } from \"../config\";\n\nconst Title = _ref => {\n  let {\n    userId\n  } = _ref;\n  const [similar, setSimilar] = useState([]);\n  const [showSimilar, setShowSimilar] = useState(0);\n  const [data, dataDispatch] = useReducer(titleReducer, {\n    title: {\n      title: \"\",\n      name: \"\",\n      backdrop_path: null,\n      poster_path: null,\n      overview: \"\",\n      vote_average: 0\n    },\n    cast: [],\n    videos: [],\n    error: false,\n    release_date: \"\"\n  });\n  const {\n    url\n  } = useRouteMatch();\n  const [, mediaType, titleId] = url.split(\"/\");\n  useFetchTitle(mediaType, titleId, dataDispatch);\n  const {\n    title: {\n      title,\n      name,\n      backdrop_path,\n      poster_path,\n      overview,\n      vote_average\n    },\n    cast,\n    videos,\n    release_date,\n    error\n  } = data;\n  const {\n    width\n  } = useWindowDimensions();\n  const heading = title || name;\n  useEffect(() => {\n    const fetchSimilar = async () => {\n      await fetch(`https://api.themoviedb.org/3/${mediaType}/${titleId}/similar?api_key=4a61e96a6e6cf693c5c03e6595ece16d`).then(res => res.json()).then(data => {\n        var _data$results, _data$results2;\n\n        setSimilar((_data$results = data.results) === null || _data$results === void 0 ? void 0 : _data$results.slice(0, 6));\n        setShowSimilar(data.total_results);\n        return console.log((_data$results2 = data.results) === null || _data$results2 === void 0 ? void 0 : _data$results2.slice(0, 6));\n      });\n    };\n\n    fetchSimilar();\n  }, [mediaType, titleId]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, heading && /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TitleBackdrop, {\n    title: heading,\n    backdropPath: backdrop_path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(OuterDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InnerDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }, width >= 991.98 && /*#__PURE__*/React.createElement(TitlePoster, {\n    title: heading,\n    posterPath: poster_path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Info, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 33\n    }\n  }, heading), /*#__PURE__*/React.createElement(Overview, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 33\n    }\n  }, width >= 991.98 ? sliceOverview(overview) : overview), /*#__PURE__*/React.createElement(Overview, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 37\n    }\n  }, \"Release Date:\", \" \", /*#__PURE__*/React.createElement(ReleaseDate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 41\n    }\n  }, release_date))), /*#__PURE__*/React.createElement(Rating, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Imdb, {\n    src: ImdbImg,\n    alt: \"imdb\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(Rank, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 37\n    }\n  }, vote_average, \"/10\"), /*#__PURE__*/React.createElement(Star, {\n    src: StarImg,\n    alt: \"star\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 33\n    }\n  }, cast.length > 0 && cast.filter((person, index) => index < 4).map(person => /*#__PURE__*/React.createElement(TitleCast, {\n    profilePath: person.profile_path,\n    name: person.name,\n    id: person.id,\n    key: person.credit_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 49\n    }\n  }))), /*#__PURE__*/React.createElement(TitleButtons, {\n    title: heading,\n    userId: userId,\n    id: titleId,\n    mediaType: mediaType,\n    posterPath: poster_path,\n    video: videos.length ? videos[0].key : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(OuterSimRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  }, !error && showSimilar > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 37\n    }\n  }, \"Similar Movies\"), /*#__PURE__*/React.createElement(SimRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 37\n    }\n  }, similar === null || similar === void 0 ? void 0 : similar.map(similarmovie => /*#__PURE__*/React.createElement(Link, {\n    to: `/${mediaType}/${similarmovie === null || similarmovie === void 0 ? void 0 : similarmovie.id}`,\n    key: similarmovie.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: \"100%\"\n    },\n    loading: \"lazy\",\n    alt: similarmovie === null || similarmovie === void 0 ? void 0 : similarmovie.original_title,\n    title: similarmovie === null || similarmovie === void 0 ? void 0 : similarmovie.original_title,\n    src: `${IMAGE_BASE_URL}w154/${similarmovie === null || similarmovie === void 0 ? void 0 : similarmovie.poster_path}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 49\n    }\n  }))))) : /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 33\n    }\n  }, \"No Similar Content Found.\")))), !error && !heading && /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 36\n    }\n  }), error && /*#__PURE__*/React.createElement(NotFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 23\n    }\n  }, \"NOT FOUND 404\"));\n};\n\nexport default Title;","map":{"version":3,"sources":["/Users/imacbruker/Desktop/smdb/src/components/Title.tsx"],"names":["React","useState","useReducer","useEffect","useRouteMatch","useWindowDimensions","titleReducer","useFetchTitle","sliceOverview","ImdbImg","StarImg","Spinner","TitleBackdrop","TitlePoster","TitleCast","TitleButtons","Container","OuterDiv","InnerDiv","Heading","Overview","Info","Rating","Imdb","Star","Rank","Row","OuterSimRow","SimRow","ReleaseDate","NotFound","Link","IMAGE_BASE_URL","Title","userId","similar","setSimilar","showSimilar","setShowSimilar","data","dataDispatch","title","name","backdrop_path","poster_path","overview","vote_average","cast","videos","error","release_date","url","mediaType","titleId","split","width","heading","fetchSimilar","fetch","then","res","json","results","slice","total_results","console","log","length","filter","person","index","map","profile_path","id","credit_id","key","similarmovie","original_title"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport useWindowDimensions from \"../hooks/useWindowDimensions\";\nimport titleReducer from \"../store/title/titleReducer\";\nimport { useFetchTitle } from \"../store/title/titleActions\";\nimport { sliceOverview } from \"../helpers\";\nimport ImdbImg from \"../assets/imdb.png\";\nimport StarImg from \"../assets/star.png\";\nimport Spinner from \"./layout/Spinner\";\nimport TitleBackdrop from \"./title/TitleBackdrop\";\nimport TitlePoster from \"./title/TitlePoster\";\nimport TitleCast from \"./title/TitleCast\";\nimport TitleButtons from \"./title/TitleButtons\";\nimport {\n    Container,\n    OuterDiv,\n    InnerDiv,\n    Heading,\n    Overview,\n    Info,\n    Rating,\n    Imdb,\n    Star,\n    Rank,\n    Row,\n    OuterSimRow,\n    SimRow,\n    ReleaseDate,\n    NotFound,\n} from \"./TitleStyles\";\nimport { Link } from \"./list/ListPosterStyles\";\nimport { IMAGE_BASE_URL } from \"../config\";\n\ninterface Props {\n    userId: string | null;\n}\n\nconst Title: React.FC<Props> = ({ userId }) => {\n    const [similar, setSimilar] = useState<any[]>([]);\n    const [showSimilar, setShowSimilar] = useState<number>(0);\n    const [data, dataDispatch] = useReducer(titleReducer, {\n        title: {\n            title: \"\",\n            name: \"\",\n            backdrop_path: null,\n            poster_path: null,\n            overview: \"\",\n            vote_average: 0,\n        },\n        cast: [],\n        videos: [],\n        error: false,\n        release_date: \"\",\n    });\n\n    const { url } = useRouteMatch<{ url: string }>();\n    const [, mediaType, titleId] = url.split(\"/\");\n    useFetchTitle(mediaType, titleId, dataDispatch);\n\n    const {\n        title: {\n            title,\n            name,\n            backdrop_path,\n            poster_path,\n            overview,\n            vote_average,\n        },\n        cast,\n        videos,\n        release_date,\n        error,\n    } = data;\n\n    const { width } = useWindowDimensions();\n    const heading: string = title || name;\n    useEffect(() => {\n        const fetchSimilar = async () => {\n            await fetch(\n                `https://api.themoviedb.org/3/${mediaType}/${titleId}/similar?api_key=4a61e96a6e6cf693c5c03e6595ece16d`\n            )\n                .then((res) => res.json())\n                .then((data) => {\n                    setSimilar(data.results?.slice(0, 6));\n                    setShowSimilar(data.total_results);\n                    return console.log(data.results?.slice(0, 6));\n                });\n        };\n        fetchSimilar();\n    }, [mediaType, titleId]);\n    return (\n        <React.Fragment>\n            {heading && (\n                <Container>\n                    <TitleBackdrop\n                        title={heading}\n                        backdropPath={backdrop_path}\n                    />\n                    <OuterDiv>\n                        <InnerDiv>\n                            {width >= 991.98 && (\n                                <TitlePoster\n                                    title={heading}\n                                    posterPath={poster_path}\n                                />\n                            )}\n\n                            <Info>\n                                <Heading>{heading}</Heading>\n                                <Overview>\n                                    {width >= 991.98\n                                        ? sliceOverview(overview)\n                                        : overview}\n                                </Overview>\n                                <Overview>\n                                    <h3>\n                                        Release Date:{\" \"}\n                                        <ReleaseDate>\n                                            {release_date}\n                                        </ReleaseDate>\n                                    </h3>\n                                </Overview>\n                                <Rating>\n                                    <Imdb src={ImdbImg} alt=\"imdb\" />\n                                    <Rank>{vote_average}/10</Rank>\n                                    <Star src={StarImg} alt=\"star\" />\n                                </Rating>\n\n                                <Row>\n                                    {cast.length > 0 &&\n                                        cast\n                                            .filter(\n                                                (person, index) => index < 4\n                                            )\n                                            .map((person) => (\n                                                <TitleCast\n                                                    profilePath={\n                                                        person.profile_path\n                                                    }\n                                                    name={person.name}\n                                                    id={person.id}\n                                                    key={person.credit_id}\n                                                />\n                                            ))}\n                                </Row>\n                                <TitleButtons\n                                    title={heading}\n                                    userId={userId}\n                                    id={titleId}\n                                    mediaType={mediaType}\n                                    posterPath={poster_path}\n                                    video={videos.length ? videos[0].key : null}\n                                />\n                            </Info>\n                        </InnerDiv>\n\n                        <OuterSimRow>\n                            {!error && showSimilar > 0 ? (\n                                <>\n                                    <h1>Similar Movies</h1>\n                                    <SimRow>\n                                        {similar?.map((similarmovie) => (\n                                            <Link\n                                                to={`/${mediaType}/${similarmovie?.id}`}\n                                                key={similarmovie.id}\n                                            >\n                                                <img\n                                                    style={{\n                                                        width: \"100%\",\n                                                    }}\n                                                    loading=\"lazy\"\n                                                    alt={\n                                                        similarmovie?.original_title\n                                                    }\n                                                    title={\n                                                        similarmovie?.original_title\n                                                    }\n                                                    src={`${IMAGE_BASE_URL}w154/${similarmovie?.poster_path}`}\n                                                />\n                                            </Link>\n                                        ))}\n                                    </SimRow>\n                                </>\n                            ) : (\n                                <h1>No Similar Content Found.</h1>\n                            )}\n                        </OuterSimRow>\n                    </OuterDiv>\n                </Container>\n            )}\n            {!error && !heading && <Spinner />}\n            {error && <NotFound>NOT FOUND 404</NotFound>}\n        </React.Fragment>\n    );\n};\n\nexport default Title;\n"]},"metadata":{},"sourceType":"module"}