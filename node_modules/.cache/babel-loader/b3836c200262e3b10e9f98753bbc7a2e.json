{"ast":null,"code":"import { useEffect } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nimport { SET_DATA, SET_ERROR } from \"./titleTypes\";\nexport function useFetchTitle(mediaType, titleId, dispatch) {\n  useEffect(() => {\n    const key = `${mediaType}_${titleId}`;\n\n    if (localStorage.getItem(key)) {\n      const data = JSON.parse(localStorage.getItem(key));\n      dispatch({\n        type: SET_DATA,\n        title: data,\n        cast: data.credits.cast,\n        videos: data.videos.results,\n        release_date: data.release_date\n      });\n    } else {\n      fetch(`${API_URL}${mediaType}/${titleId}?api_key=${API_KEY}&append_to_response=videos,credits`).then(res => res.json()).then(data => {\n        if (data.status_code) {\n          dispatch({\n            type: SET_ERROR,\n            error: true\n          });\n        } else {\n          dispatch({\n            type: SET_DATA,\n            title: data,\n            cast: data.credits.cast,\n            videos: data.videos.results,\n            release_date: data.release_date\n          });\n          dispatch({\n            type: SET_ERROR,\n            error: false\n          });\n          localStorage.setItem(key, JSON.stringify(data));\n        }\n      });\n    }\n  }, [dispatch, mediaType, titleId]);\n}","map":{"version":3,"sources":["/Users/imacbruker/Desktop/smdb/src/store/title/titleActions.ts"],"names":["useEffect","API_URL","API_KEY","SET_DATA","SET_ERROR","useFetchTitle","mediaType","titleId","dispatch","key","localStorage","getItem","data","JSON","parse","type","title","cast","credits","videos","results","release_date","fetch","then","res","json","status_code","error","setItem","stringify"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAsD,cAAtD;AAEA,OAAO,SAASC,aAAT,CACHC,SADG,EAEHC,OAFG,EAGHC,QAHG,EAIC;AACJR,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,GAAW,GAAI,GAAEH,SAAU,IAAGC,OAAQ,EAA5C;;AACA,QAAIG,YAAY,CAACC,OAAb,CAAqBF,GAArB,CAAJ,EAA+B;AAC3B,YAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqBF,GAArB,CAAX,CAAb;AACAD,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEZ,QADD;AAELa,QAAAA,KAAK,EAAEJ,IAFF;AAGLK,QAAAA,IAAI,EAAEL,IAAI,CAACM,OAAL,CAAaD,IAHd;AAILE,QAAAA,MAAM,EAAEP,IAAI,CAACO,MAAL,CAAYC,OAJf;AAKLC,QAAAA,YAAY,EAAET,IAAI,CAACS;AALd,OAAD,CAAR;AAOH,KATD,MASO;AACHC,MAAAA,KAAK,CACA,GAAErB,OAAQ,GAAEK,SAAU,IAAGC,OAAQ,YAAWL,OAAQ,oCADpD,CAAL,CAGKqB,IAHL,CAGWC,GAAD,IAAmBA,GAAG,CAACC,IAAJ,EAH7B,EAIKF,IAJL,CAIWX,IAAD,IAAU;AACZ,YAAIA,IAAI,CAACc,WAAT,EAAsB;AAClBlB,UAAAA,QAAQ,CAAC;AAAEO,YAAAA,IAAI,EAAEX,SAAR;AAAmBuB,YAAAA,KAAK,EAAE;AAA1B,WAAD,CAAR;AACH,SAFD,MAEO;AACHnB,UAAAA,QAAQ,CAAC;AACLO,YAAAA,IAAI,EAAEZ,QADD;AAELa,YAAAA,KAAK,EAAEJ,IAFF;AAGLK,YAAAA,IAAI,EAAEL,IAAI,CAACM,OAAL,CAAaD,IAHd;AAILE,YAAAA,MAAM,EAAEP,IAAI,CAACO,MAAL,CAAYC,OAJf;AAKLC,YAAAA,YAAY,EAAET,IAAI,CAACS;AALd,WAAD,CAAR;AAOAb,UAAAA,QAAQ,CAAC;AAAEO,YAAAA,IAAI,EAAEX,SAAR;AAAmBuB,YAAAA,KAAK,EAAE;AAA1B,WAAD,CAAR;AACAjB,UAAAA,YAAY,CAACkB,OAAb,CAAqBnB,GAArB,EAA0BI,IAAI,CAACgB,SAAL,CAAejB,IAAf,CAA1B;AACH;AACJ,OAlBL;AAmBH;AACJ,GAhCQ,EAgCN,CAACJ,QAAD,EAAWF,SAAX,EAAsBC,OAAtB,CAhCM,CAAT;AAiCH","sourcesContent":["import { useEffect } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nimport { SET_DATA, SET_ERROR, TitleActionTypes } from \"./titleTypes\";\n\nexport function useFetchTitle(\n    mediaType: string,\n    titleId: string,\n    dispatch: React.Dispatch<TitleActionTypes>\n): void {\n    useEffect(() => {\n        const key: string = `${mediaType}_${titleId}`;\n        if (localStorage.getItem(key)) {\n            const data = JSON.parse(localStorage.getItem(key) as string);\n            dispatch({\n                type: SET_DATA,\n                title: data,\n                cast: data.credits.cast,\n                videos: data.videos.results,\n                release_date: data.release_date,\n            });\n        } else {\n            fetch(\n                `${API_URL}${mediaType}/${titleId}?api_key=${API_KEY}&append_to_response=videos,credits`\n            )\n                .then((res: Response) => res.json())\n                .then((data) => {\n                    if (data.status_code) {\n                        dispatch({ type: SET_ERROR, error: true });\n                    } else {\n                        dispatch({\n                            type: SET_DATA,\n                            title: data,\n                            cast: data.credits.cast,\n                            videos: data.videos.results,\n                            release_date: data.release_date,\n                        });\n                        dispatch({ type: SET_ERROR, error: false });\n                        localStorage.setItem(key, JSON.stringify(data));\n                    }\n                });\n        }\n    }, [dispatch, mediaType, titleId]);\n}\n"]},"metadata":{},"sourceType":"module"}